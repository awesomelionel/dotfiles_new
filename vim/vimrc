" Lionel Tan's .vimrc file
autocmd!
execute pathogen#infect()
call pathogen#helptags()

" setlocal spell spelllang=en_us " Set Spelling
set nocompatible          " Don't care about vi
set encoding=utf-8
filetype off              " Set filetype stuff to on
filetype plugin indent on
syntax on                 " Switch on syntax highlighting
set shell=/bin/sh

"Settings
let mapleader = ","
let maplocalleader = "\\"

" Presentation Settings
set number       " Set Line numbering
set tabstop=2    " Tabstops are 4 spaces
set shiftwidth=2 " Number of spaces for indent
set expandtab
set nowrap       " Do not wrap words (view)
set textwidth=0  " Do not wrap word (insert)
set showcmd      " Show the current command in the lower right corner
set showmode     " Show the current mode
set showmatch    " Show matching brackets.
set ruler        " Line and column number of the cursor positions
set visualbell   " use visual bell instead of beeps
set wildmenu     " Make the command-line completion better
set scrolloff=8  " Keep the cursor 8 lines from the bottom when scolling
set linespace=3  " Larger Line Height
set go-=T        " Hides MacVim toolbar
set hidden       " Set Hidden for LustyExplorer
set backspace=indent,eol,start
" Behaviours
"au FocusLost * :wa       " This means whenever Vim loses focus, it saves the files in the buffer
set history=100         " Keep some stuff in the history
set nobackup          " Stop Vim making back up files
set noswapfile
set clipboard=unnamed     " Anything copied will be in the clipboard
" Search Settings
set incsearch         " Incrementally match the search
set hlsearch          " Enable search highlighting
set ignorecase          " set the search scan so that it ignores case when the search is all lower
set smartcase         " case but recognizes uppercase if it's specified
" Mouse mode
set mouse=a

" ctags
set tags=./tags;

" Use ack instead of vim grep
set grepprg=ack

" setting autoindenting for all filetypes
set autoindent
" indent the whole file and return to original position
nmap ,= mzgg=G`z

" KeyBindings
"Clear search when you press ,/
nmap <leader>/ :nohlsearch<CR>
nmap <CR> :nohlsearch<CR>

" leader w to save 
nmap <leader>ww :w<CR>

"Change window key remap
nmap <leader>w <C-w>w 
noremap <silent> <C-j> <C-W>j
noremap <silent> <C-k> <C-W>k
noremap <silent> <C-h> <C-W>h
noremap <silent> <C-l> <C-W>l

" Edit the vimrc file
nmap <leader>ev :e $MYVIMRC<CR>
nmap <leader>sv :so $MYVIMRC<CR>

" Toggle Paste mode
nmap ,o :set paste!<CR>

" Can't be bothered to understand ESC vs <c-c> in normal mode
nmap <c-c> <esc>

" Switch Between buffers
nmap <leader>, <C-^>

" Skipping lines when wrap is set (ONLY USEFUL when wrap is set)
nnoremap j gj
nnoremap k gk

" Unwanted keys
nnoremap <F1> <nop>
" ex mode
nnoremap Q <nop>
" man page
nnoremap K <nop>

" Remove intro text
set shortmess+=I

"open new tab
nmap <leader>t :tabnew<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM AUTOCMDS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup vimrcEx
  " Clear all autocmds in the group
  autocmd!
  autocmd FileType text setlocal textwidth=78
  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  "for ruby, autoindent with two spaces, always expand tabs
  autocmd FileType ruby,haml,eruby,yaml,html,javascript,sass,cucumber set ai sw=2 sts=2 et

  " setting the indenting width for html, xml and php files (you can add more)
  autocmd FileType html,xml,php setlocal expandtab shiftwidth=2 tabstop=2
  autocmd! BufRead,BufNewFile *.sass setfiletype sass 

  autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:&gt;
  autocmd BufRead *.markdown  set ai formatoptions=tcroqn2 comments=n:&gt;

  " Don't syntax highlight markdown because it's often wrong
  autocmd! FileType mkd setlocal syn=off

  " *.md is markdown
  autocmd! BufNewFile,BufRead *.md setlocal ft=markdown

  " ember hbs
  autocmd! BufRead,BufNewFile *.hbs setfiletype html
augroup END

" Netrw view
" let g:netrw_liststyle=3

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set t_Co=256 " 256 colors
set term=xterm-256color
set background=dark
colorscheme grb256

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" STATUS LINE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGIN: CTRLP
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:nmap ; :CtrlPBuffer<CR>
:nmap <space><space> :CtrlP<CR><F5>
set wildignore+=*/tmp/*
set wildignore+=*/node_modules/*
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGIN: NERDTREE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap ,nt :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
"autocmd VimEnter * NERDTree
"autocmd VimEnter * wincmd p

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGIN: Emmet
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:user_emmet_expandabbr_key='<C-e>'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGIN: VIMGO
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufRead,BufNewFile *.go set filetype=go
au Filetype go nnoremap <leader>v :vsp <CR>:exe "GoDef" <CR>
au Filetype go nnoremap <leader>s :sp <CR>:exe "GoDef"<CR>
au Filetype go nnoremap <leader>t :tab split <CR>:exe "GoDef"<CR>
au Filetype go nnoremap <leader>r :GoRun %<CR>
au Filetype go nnoremap <leader>i :GoInstall %<CR>
au Filetype go nnoremap <leader>b :GoBuild %<CR>
au Filetype go nnoremap <leader>f :GoFmt %<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGIN: RSpec.vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGIN: Syntastic React
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:syntastic_javascript_checkers = ['eslint']

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGIN: Gundo
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>u :GundoToggle<CR>

""""" EXPERIMENTAL """""
"" Change cursor shape in TMUX ITerm2
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
